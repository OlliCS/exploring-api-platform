/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-4.use[1]!./node_modules/vue-loader/dist/stylePostLoader.js!./node_modules/vue-loader/dist/index.js??ruleSet[0].use[0]!./assets/calendar.vue?vue&type=style&index=0&id=347c3e2c&lang=css ***!
  \********************************************************************************************************************************************************************************************************************************************************/

.wrap {
  display: flex;
}
.left {
  margin-right: 10px;
}
.content {
  flex-grow: 1;
}
.input {
  margin-top: 10px;
  width: 100%;
  box-sizing: border-box;
  padding: 5px;
  font-size: 16px;
}
.calendar_default_event_inner {
  background: #2e78d6;
  color: white;
  border-radius: 5px;
  opacity: 0.9;
}


/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/